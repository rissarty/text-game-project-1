import pygame, asyncio
import sys
import random

# Initialize Pygame
pygame.init()

# Constants
FPS = 60
screen_width = 800
screen_height = 600
fullscreen = False
touch_detected = False  # Detects if any touchscreen interaction occurred

# Set up the display
screen = pygame.display.set_mode((screen_width, screen_height), pygame.RESIZABLE)
pygame.display.set_caption("Adventure Game")

# Load fonts
font = pygame.font.Font(None, 48)


# Function to display text
def display_text(text, x, y, color=(255, 255, 255)):
    text_surface = font.render(text, True, color)
    rect = text_surface.get_rect(topleft=(x, y))
    screen.blit(text_surface, rect)
    return rect


# Function to display centered text
def display_centered_text(text, y_offset, color=(255, 255, 255)):
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect(center=(screen_width // 2, y_offset))
    screen.blit(text_surface, text_rect)


# Function to display the player's inventory
def display_inventory(inventory):
    y_offset = 550
    display_text("Inventory:", 50, y_offset)
    y_offset += 30
    for item in inventory:
        display_text(item, 50, y_offset)
        y_offset += 30


# Game variables
current_state = "intro"
input_text = ""
inventory = []
clickable_areas = []
transition_delay = 1000
transition_timer = 0
pending_state = None
show_keyboard = False


# --- Enemy Class ---
class Enemy:
    def __init__(self, name, health, min_damage, max_damage):
        self.name = name
        self.health = health
        self.min_damage = min_damage
        self.max_damage = max_damage

    def attack(self):
        return random.randint(self.min_damage, self.max_damage)

    def take_damage(self, damage):
        self.health -= damage

    def is_alive(self):
        return self.health > 0


# --- List of Enemies ---
enemy_list = [Enemy("Boar", 30, 2, 8)]


# --- Dynamic Image Scaling Function ---
def scale_image(image, width, height):
    original_width, original_height = image.get_size()
    aspect_ratio = original_width / original_height

    if width / height > aspect_ratio:
        new_width = int(height * aspect_ratio)
        new_height = height
    else:
        new_width = width
        new_height = int(width / aspect_ratio)

    return pygame.transform.scale(image, (new_width, new_height))


# --- Virtual Keyboard Keys ---
keyboard_keys = [
    list("QWERTYUIOP"),
    list("ASDFGHJKL"),
    list("ZXCVBNM"),
]


# Generate button rects for virtual keyboard
def draw_virtual_keyboard(y_start):
    key_rects = []
    key_width = 60
    key_height = 60
    padding = 10

    for row_index, row in enumerate(keyboard_keys):
        x_offset = (screen_width - (len(row) * (key_width + padding))) // 2
        y_offset = y_start + row_index * (key_height + padding)

        for char in row:
            rect = pygame.Rect(x_offset, y_offset, key_width, key_height)
            pygame.draw.rect(screen, (70, 70, 70), rect)
            letter = font.render(char, True, (255, 255, 255))
            screen.blit(letter, letter.get_rect(center=rect.center))
            key_rects.append((rect, char))
            x_offset += key_width + padding

    # Add ENTER and BACKSPACE keys
    enter_rect = pygame.Rect(screen_width - 140, y_start + 3 * (key_height + padding), 120, key_height)
    backspace_rect = pygame.Rect(20, y_start + 3 * (key_height + padding), 120, key_height)
    pygame.draw.rect(screen, (70, 70, 70), enter_rect)
    pygame.draw.rect(screen, (70, 70, 70), backspace_rect)
    enter_text = font.render("Enter", True, (255, 255, 255))
    back_text = font.render("Back", True, (255, 255, 255))
    screen.blit(enter_text, enter_text.get_rect(center=enter_rect.center))
    screen.blit(back_text, back_text.get_rect(center=backspace_rect.center))
    key_rects.append((enter_rect, "ENTER"))
    key_rects.append((backspace_rect, "BACK"))
    return key_rects


# Main game loop
async def main():
    global current_state, input_text, screen_width, screen_height, screen
    global inventory, clickable_areas, transition_timer, pending_state
    global current_enemy, player_health, battle_message, show_keyboard

    clock = pygame.time.Clock()
    mouse_was_pressed = False
    background_image_original = pygame.image.load("beachtropicalislandimage.png").convert()
    keyboard_rects = []

    while True:
        clickable_areas = []
        keyboard_rects = []

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            elif event.type == pygame.VIDEORESIZE:
                screen_width, screen_height = event.w, event.h
                screen = pygame.display.set_mode((screen_width, screen_height), pygame.RESIZABLE)

            elif event.type == pygame.KEYDOWN:
                if current_state == "intro" and not show_keyboard:
                    if event.key == pygame.K_RETURN:
                        current_state = "first_choice"
                    elif event.key == pygame.K_BACKSPACE:
                        input_text = input_text[:-1]
                    elif event.key == pygame.K_ESCAPE:
                        input_text = ""
                    else:
                        input_text += event.unicode

            elif event.type == pygame.FINGERDOWN:
                tx = int(event.x * screen_width)
                ty = int(event.y * screen_height)
                touch_detected = True
                if current_state == "intro":
                    show_keyboard = True
                for rect, state in clickable_areas:
                    if rect.collidepoint(tx, ty):
                        current_state = state
                        break
                for rect, value in keyboard_rects:
                    if rect.collidepoint(tx, ty):
                        if value == "ENTER":
                            current_state = "first_choice"
                        elif value == "BACK":
                            input_text = input_text[:-1]
                        else:
                            input_text += value

        screen.fill((0, 0, 0))
        background_image_scaled = scale_image(background_image_original, screen_width, screen_height)
        screen.blit(background_image_scaled, (0, 0))

        def draw_button(text, y, color=(255, 255, 255), bg_color=(70, 70, 70), padding=10):
            text_surface = font.render(text, True, color)
            rect = text_surface.get_rect(center=(screen_width // 2, y))
            button_rect = pygame.Rect(rect.x - padding, rect.y - padding, rect.width + 2 * padding,
                                      rect.height + 2 * padding)
            pygame.draw.rect(screen, bg_color, button_rect)
            screen.blit(text_surface, rect)
            return button_rect

        # --- Game State Rendering ---
        if current_state == "intro":
            display_centered_text("HELLO", 100)
            display_text("Enter your name:", 50, 200)
            display_text(input_text, 50, 250)

            # Add toggle keyboard button
            toggle_keyboard_button = draw_button("Toggle Keyboard", 300)
            clickable_areas.append((toggle_keyboard_button, "toggle_keyboard"))

            if show_keyboard:
                keyboard_rects = draw_virtual_keyboard(370)


        elif current_state == "first_choice":
            display_text("You wake up in the middle of nowhere...", 50, 200)
            display_text("You see a plane crash site nearby.", 50, 230)
            display_text("You remember you were on a flight.", 50, 260)
            b1 = draw_button("1. Find someone", 360)
            b2 = draw_button("2. Look for shelter", 420)
            clickable_areas.extend([(b1, "find_someone"), (b2, "find_shelter")])

        elif current_state == "transition_text":
            display_centered_text("You start looking for someone...", 300)
            if pygame.time.get_ticks() - transition_timer > transition_delay:
                current_state = pending_state
                pending_state = None

        elif current_state == "your_next_state":
            display_centered_text("You reach an open field, unsure where to go next.", 300)

        elif current_state in ["find_someone", "find_shelter"]:
            display_centered_text("You come across an abandoned shack...", 300)
            display_centered_text("You find a Machete and expired food supplies.", 340)
            b1 = draw_button("Take Machete", 460)
            b2 = draw_button("Take Food Supplies", 520)
            clickable_areas.extend([(b1, "Machete_choice"), (b2, "Food_choice")])

        elif current_state == "Machete_choice":
            display_centered_text("You acquired: Machete", 400)
            if "Machete" not in inventory:
                inventory.append("Machete")
            b1 = draw_button("Continue", 500)
            clickable_areas.append((b1, "after_item_choice"))

        elif current_state == "Food_choice":
            display_centered_text("You acquired: Food supplies", 400)
            if "Food supplies" not in inventory:
                inventory.append("Food supplies")
            b1 = draw_button("Continue", 500)
            clickable_areas.append((b1, "after_item_choice"))

        elif current_state == "after_item_choice":
            display_centered_text("You take your item and try to find shelter...", 400)
            b1 = draw_button("Continue", 500)
            clickable_areas.append((b1, "forest_or_beach1"))

        elif current_state == "forest_or_beach1":
            display_centered_text("You see a forest and a beach as night falls.", 400)
            b1 = draw_button("Go to Forest", 460)
            b2 = draw_button("Go to Beach", 520)
            clickable_areas.extend([(b1, "Forest_arrive"), (b2, "Beach_arrive")])

        elif current_state == "Forest_arrive":
            display_centered_text("You enter deep into the forest.", 400)
            b1 = draw_button("Continue", 500)
            clickable_areas.append((b1, "Boar_fight1"))

        elif current_state == "Boar_fight1":
            display_centered_text("A boar charges at you!", 400)
            if "Machete" in inventory:
                b1 = draw_button("Fight with Machete", 460)
                clickable_areas.append((b1, "Boar_fight_initialisation"))
            b2 = draw_button("RUN!!", 520)
            clickable_areas.append((b2, "Run"))

        elif current_state == "Boar_fight_initialisation":
            display_centered_text("You get ready to fight, picking up your Machete", 400)
            current_enemy = enemy_list[0]
            player_health = 20
            battle_message = ""
            current_state = "Boar_battle"

        elif current_state == "Boar_battle":
            display_centered_text(f"Your Health: {player_health}", 100)
            display_centered_text(f"{current_enemy.name} Health: {current_enemy.health}", 150)
            if battle_message:
                display_centered_text(battle_message, 250)
            b1 = draw_button("Attack", 400)
            b2 = draw_button("Defend", 460)
            b3 = draw_button("Run Away", 520)
            clickable_areas.extend([(b1, "attack"), (b2, "defend"), (b3, "run")])

        elif current_state == "Run":
            display_centered_text("You start running and get slightly hurt...", 400)

        elif current_state == "Beach_arrive":
            display_centered_text("You arrive at the beach and look at the sea.", 400)

        elif current_state == "game_over":
            display_centered_text("Game Over", 300)
            b1 = draw_button("Restart", 400)
            clickable_areas.append((b1, "intro"))

        display_inventory(inventory)

        mouse_pressed = pygame.mouse.get_pressed()[0]
        if mouse_pressed and not mouse_was_pressed:
            mouse_pos = pygame.mouse.get_pos()
            for rect, state in clickable_areas:
                if rect.collidepoint(mouse_pos):
                    if state == "toggle_keyboard":
                        show_keyboard = not show_keyboard
                    elif current_state == "first_choice":
                        transition_timer = pygame.time.get_ticks()
                        pending_state = state
                        current_state = "transition_text"
                    else:
                        current_state = state

                    break
            for rect, value in keyboard_rects:
                if rect.collidepoint(mouse_pos):
                    if value == "ENTER":
                        current_state = "first_choice"
                    elif value == "BACK":
                        input_text = input_text[:-1]
                    else:
                        input_text += value
        mouse_was_pressed = mouse_pressed

        pygame.display.flip()
        clock.tick(FPS)
        await asyncio.sleep(0)


if __name__ == "__main__":
    asyncio.run(main())
